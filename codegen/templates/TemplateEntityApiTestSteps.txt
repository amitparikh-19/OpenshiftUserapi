package com.kd.apps.steps;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.junit.Assert;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;

import com.kd.apps.PageImplCustom;
import com.kd.apps.TestProp;
import com.kd.apps.model.TemplateEntity;

import net.thucydides.core.annotations.Step;
import net.thucydides.core.steps.ScenarioSteps;

public class TemplateEntityApiTestSteps extends ScenarioSteps {
	private static final long serialVersionUID = 1L;

	RestTemplate restTemplate;
	long count;
	Date updateDate;
	TemplateEntity entity;

	public TemplateEntityApiTestSteps() {
		restTemplate = new RestTemplate();
	}

	@Step
	public void create(String url, String xauthtoken) {
		MultiValueMap<String, String> requestHeaders = new LinkedMultiValueMap<String, String>();
		requestHeaders.add("Content-Type", "application/json");
		requestHeaders.add("X-AUTH-TOKEN", xauthtoken);

		TemplateEntity templateEntity = new TemplateEntity();
		//TODO set required properties of the entity

		// Note the body object as first parameter!
		HttpEntity<TemplateEntity> httpEntity = new HttpEntity<TemplateEntity>(templateEntity, requestHeaders);

		this.entity = restTemplate.postForObject(url, httpEntity, TemplateEntity.class);
		TestProp.writeProp("api.id",  String.valueOf(entity.getId()));
	}

	@Step
	public void testEntity() {
		System.out.println();
		Assert.assertTrue(this.entity != null);
		Assert.assertTrue(this.entity.getId() != null);
	}

	@Step
	public void readOne(String url, String xauthtoken) {
		MultiValueMap<String, String> requestHeaders = new LinkedMultiValueMap<String, String>();
		requestHeaders.add("Content-Type", "application/json");
		requestHeaders.add("X-AUTH-TOKEN", xauthtoken);

		HttpEntity<?> httpEntity = new HttpEntity<Object>(requestHeaders);

		httpEntity = restTemplate.exchange(url + "/" + TestProp.readProp("api.id"), HttpMethod.GET, httpEntity,
				TemplateEntity.class);
		this.entity = (TemplateEntity) httpEntity.getBody();
	}

	@Step
	public void readAll(String url, String xauthtoken) {
		MultiValueMap<String, String> requestHeaders = new LinkedMultiValueMap<String, String>();
		requestHeaders.add("Content-Type", "application/json");
		requestHeaders.add("X-AUTH-TOKEN", xauthtoken);

		HttpEntity<?> httpEntity = new HttpEntity<Object>(requestHeaders);

		this.count = 0;
		httpEntity = restTemplate.exchange(url, HttpMethod.GET, httpEntity, Iterable.class);
		@SuppressWarnings("unchecked")
		ArrayList<TemplateEntity> entities = (ArrayList<TemplateEntity>) httpEntity.getBody();
		Iterator<TemplateEntity> iterator = entities.iterator();
		while (iterator.hasNext()) {
			this.count++;
			iterator.next();
		}
	}

	@Step
	public void testCount() {
		Assert.assertTrue(this.count > 0);
	}

	@Step
	public void readAllPageable(String url, String xauthtoken) {
		MultiValueMap<String, String> requestHeaders = new LinkedMultiValueMap<String, String>();
		requestHeaders.add("Content-Type", "application/json");
		requestHeaders.add("X-AUTH-TOKEN", xauthtoken);

		HttpEntity<?> httpEntity = new HttpEntity<Object>(requestHeaders);

		this.count = 0;
		httpEntity = restTemplate.exchange(url + "/pageable?firstresult=0&maxresult=1", HttpMethod.GET, httpEntity,
				PageImplCustom.class);
		@SuppressWarnings("unchecked")
		PageImplCustom<TemplateEntity> pageResult = (PageImplCustom<TemplateEntity>) httpEntity.getBody();
		List<TemplateEntity> entities = pageResult.getContent();
		Iterator<TemplateEntity> iterator = entities.iterator();
		while (iterator.hasNext()) {
			this.count++;
			iterator.next();
		}
	}

	@Step
	public void update(String url, String xauthtoken) {
		MultiValueMap<String, String> requestHeaders = new LinkedMultiValueMap<String, String>();
		requestHeaders.add("Content-Type", "application/json");
		requestHeaders.add("X-AUTH-TOKEN", xauthtoken);

		TemplateEntity templateEntity = new TemplateEntity();
		this.updateDate = new Date();
		templateEntity.setCreated(this.updateDate);

		// Note the body object as first parameter!
		HttpEntity<TemplateEntity> httpEntity = new HttpEntity<TemplateEntity>(templateEntity, requestHeaders);

		restTemplate.put(url + "/" + TestProp.readProp("api.id"), httpEntity);

		HttpEntity<?> httpReadEntity = new HttpEntity<Object>(requestHeaders);

		httpReadEntity = restTemplate.exchange(url + "/" + TestProp.readProp("api.id"), HttpMethod.GET, httpReadEntity,
				TemplateEntity.class);
		this.entity = (TemplateEntity) httpReadEntity.getBody();
	}

	@Step
	public void testUpdate() {
		Assert.assertTrue(this.updateDate.toString().equals(this.entity.getCreated().toString()));
	}

	@Step
	public void delete(String url, String xauthtoken) {
		MultiValueMap<String, String> requestHeaders = new LinkedMultiValueMap<String, String>();
		requestHeaders.add("Content-Type", "application/json");
		requestHeaders.add("X-AUTH-TOKEN", xauthtoken);

		HttpEntity<?> httpEntity = new HttpEntity<Object>(requestHeaders);

		restTemplate.delete(url + "/" + TestProp.readProp("api.id"), httpEntity);

		HttpEntity<?> httpReadEntity = new HttpEntity<Object>(requestHeaders);

		try {
			httpReadEntity = restTemplate.exchange(url + "/" + TestProp.readProp("api.id"), HttpMethod.GET,
					httpReadEntity, TemplateEntity.class);
		} catch (HttpServerErrorException e) {
			this.entity = null;
		}
	}

	@Step
	public void testNullEntity() {
		Assert.assertTrue(null == this.entity);
	}

}